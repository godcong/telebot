// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.9
// Revision: 5a95b1bbcaf1f8f32542725929d84acdf48e0259
// Build Date: 2021-11-05T17:00:39Z
// Built By: goreleaser

package config

import (
	"fmt"
)

const (
	// BotModelWebhook is a BotModel of type Webhook.
	BotModelWebhook BotModel = iota
	// BotModelUpdate is a BotModel of type Update.
	BotModelUpdate
	// BotModelMax is a BotModel of type Max.
	BotModelMax
)

const _BotModelName = "webhookupdatemax"

var _BotModelMap = map[BotModel]string{
	BotModelWebhook: _BotModelName[0:7],
	BotModelUpdate:  _BotModelName[7:13],
	BotModelMax:     _BotModelName[13:16],
}

// String implements the Stringer interface.
func (x BotModel) String() string {
	if str, ok := _BotModelMap[x]; ok {
		return str
	}
	return fmt.Sprintf("BotModel(%d)", x)
}

var _BotModelValue = map[string]BotModel{
	_BotModelName[0:7]:   BotModelWebhook,
	_BotModelName[7:13]:  BotModelUpdate,
	_BotModelName[13:16]: BotModelMax,
}

// ParseBotModel attempts to convert a string to a BotModel
func ParseBotModel(name string) (BotModel, error) {
	if x, ok := _BotModelValue[name]; ok {
		return x, nil
	}
	return BotModel(0), fmt.Errorf("%s is not a valid BotModel", name)
}

// MarshalText implements the text marshaller method
func (x BotModel) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *BotModel) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseBotModel(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
