// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/motomototv/telebot/database/ent/message"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Action holds the value of the "action" field.
	Action message.Action `json:"action,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// AutoRemove holds the value of the "auto_remove" field.
	AutoRemove bool `json:"auto_remove,omitempty"`
	// AutoRemoveTime holds the value of the "auto_remove_time" field.
	AutoRemoveTime int `json:"auto_remove_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldAutoRemove:
			values[i] = new(sql.NullBool)
		case message.FieldID, message.FieldType, message.FieldAutoRemoveTime:
			values[i] = new(sql.NullInt64)
		case message.FieldAction, message.FieldMessage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case message.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = int(value.Int64)
			}
		case message.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				m.Action = message.Action(value.String)
			}
		case message.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				m.Message = value.String
			}
		case message.FieldAutoRemove:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_remove", values[i])
			} else if value.Valid {
				m.AutoRemove = value.Bool
			}
		case message.FieldAutoRemoveTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field auto_remove_time", values[i])
			} else if value.Valid {
				m.AutoRemoveTime = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", m.Type))
	builder.WriteString(", action=")
	builder.WriteString(fmt.Sprintf("%v", m.Action))
	builder.WriteString(", message=")
	builder.WriteString(m.Message)
	builder.WriteString(", auto_remove=")
	builder.WriteString(fmt.Sprintf("%v", m.AutoRemove))
	builder.WriteString(", auto_remove_time=")
	builder.WriteString(fmt.Sprintf("%v", m.AutoRemoveTime))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
