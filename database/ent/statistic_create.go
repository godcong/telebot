// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/motomototv/telebot/database/ent/statistic"
)

// StatisticCreate is the builder for creating a Statistic entity.
type StatisticCreate struct {
	config
	mutation *StatisticMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (sc *StatisticCreate) SetFirstName(s string) *StatisticCreate {
	sc.mutation.SetFirstName(s)
	return sc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableFirstName(s *string) *StatisticCreate {
	if s != nil {
		sc.SetFirstName(*s)
	}
	return sc
}

// SetLatName sets the "lat_name" field.
func (sc *StatisticCreate) SetLatName(s string) *StatisticCreate {
	sc.mutation.SetLatName(s)
	return sc
}

// SetNillableLatName sets the "lat_name" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableLatName(s *string) *StatisticCreate {
	if s != nil {
		sc.SetLatName(*s)
	}
	return sc
}

// SetUserName sets the "user_name" field.
func (sc *StatisticCreate) SetUserName(s string) *StatisticCreate {
	sc.mutation.SetUserName(s)
	return sc
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableUserName(s *string) *StatisticCreate {
	if s != nil {
		sc.SetUserName(*s)
	}
	return sc
}

// SetFromUser sets the "from_user" field.
func (sc *StatisticCreate) SetFromUser(i int) *StatisticCreate {
	sc.mutation.SetFromUser(i)
	return sc
}

// SetNillableFromUser sets the "from_user" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableFromUser(i *int) *StatisticCreate {
	if i != nil {
		sc.SetFromUser(*i)
	}
	return sc
}

// SetChannelID sets the "channel_id" field.
func (sc *StatisticCreate) SetChannelID(i int64) *StatisticCreate {
	sc.mutation.SetChannelID(i)
	return sc
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableChannelID(i *int64) *StatisticCreate {
	if i != nil {
		sc.SetChannelID(*i)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *StatisticCreate) SetUserID(i int) *StatisticCreate {
	sc.mutation.SetUserID(i)
	return sc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableUserID(i *int) *StatisticCreate {
	if i != nil {
		sc.SetUserID(*i)
	}
	return sc
}

// SetJoinTime sets the "join_time" field.
func (sc *StatisticCreate) SetJoinTime(i int64) *StatisticCreate {
	sc.mutation.SetJoinTime(i)
	return sc
}

// SetNillableJoinTime sets the "join_time" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableJoinTime(i *int64) *StatisticCreate {
	if i != nil {
		sc.SetJoinTime(*i)
	}
	return sc
}

// SetInvited sets the "invited" field.
func (sc *StatisticCreate) SetInvited(i int64) *StatisticCreate {
	sc.mutation.SetInvited(i)
	return sc
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableInvited(i *int64) *StatisticCreate {
	if i != nil {
		sc.SetInvited(*i)
	}
	return sc
}

// SetMessage sets the "message" field.
func (sc *StatisticCreate) SetMessage(i int64) *StatisticCreate {
	sc.mutation.SetMessage(i)
	return sc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (sc *StatisticCreate) SetNillableMessage(i *int64) *StatisticCreate {
	if i != nil {
		sc.SetMessage(*i)
	}
	return sc
}

// Mutation returns the StatisticMutation object of the builder.
func (sc *StatisticCreate) Mutation() *StatisticMutation {
	return sc.mutation
}

// Save creates the Statistic in the database.
func (sc *StatisticCreate) Save(ctx context.Context) (*Statistic, error) {
	var (
		err  error
		node *Statistic
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatisticCreate) SaveX(ctx context.Context) *Statistic {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatisticCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatisticCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatisticCreate) defaults() {
	if _, ok := sc.mutation.FirstName(); !ok {
		v := statistic.DefaultFirstName
		sc.mutation.SetFirstName(v)
	}
	if _, ok := sc.mutation.LatName(); !ok {
		v := statistic.DefaultLatName
		sc.mutation.SetLatName(v)
	}
	if _, ok := sc.mutation.UserName(); !ok {
		v := statistic.DefaultUserName
		sc.mutation.SetUserName(v)
	}
	if _, ok := sc.mutation.FromUser(); !ok {
		v := statistic.DefaultFromUser
		sc.mutation.SetFromUser(v)
	}
	if _, ok := sc.mutation.ChannelID(); !ok {
		v := statistic.DefaultChannelID
		sc.mutation.SetChannelID(v)
	}
	if _, ok := sc.mutation.UserID(); !ok {
		v := statistic.DefaultUserID
		sc.mutation.SetUserID(v)
	}
	if _, ok := sc.mutation.JoinTime(); !ok {
		v := statistic.DefaultJoinTime
		sc.mutation.SetJoinTime(v)
	}
	if _, ok := sc.mutation.Invited(); !ok {
		v := statistic.DefaultInvited
		sc.mutation.SetInvited(v)
	}
	if _, ok := sc.mutation.Message(); !ok {
		v := statistic.DefaultMessage
		sc.mutation.SetMessage(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatisticCreate) check() error {
	if _, ok := sc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "first_name"`)}
	}
	if _, ok := sc.mutation.LatName(); !ok {
		return &ValidationError{Name: "lat_name", err: errors.New(`ent: missing required field "lat_name"`)}
	}
	if _, ok := sc.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "user_name"`)}
	}
	if _, ok := sc.mutation.FromUser(); !ok {
		return &ValidationError{Name: "from_user", err: errors.New(`ent: missing required field "from_user"`)}
	}
	if _, ok := sc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "channel_id"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := sc.mutation.JoinTime(); !ok {
		return &ValidationError{Name: "join_time", err: errors.New(`ent: missing required field "join_time"`)}
	}
	if _, ok := sc.mutation.Invited(); !ok {
		return &ValidationError{Name: "invited", err: errors.New(`ent: missing required field "invited"`)}
	}
	if _, ok := sc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "message"`)}
	}
	return nil
}

func (sc *StatisticCreate) sqlSave(ctx context.Context) (*Statistic, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *StatisticCreate) createSpec() (*Statistic, *sqlgraph.CreateSpec) {
	var (
		_node = &Statistic{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statistic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statistic.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := sc.mutation.LatName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldLatName,
		})
		_node.LatName = value
	}
	if value, ok := sc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldUserName,
		})
		_node.UserName = value
	}
	if value, ok := sc.mutation.FromUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldFromUser,
		})
		_node.FromUser = value
	}
	if value, ok := sc.mutation.ChannelID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldChannelID,
		})
		_node.ChannelID = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := sc.mutation.JoinTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldJoinTime,
		})
		_node.JoinTime = value
	}
	if value, ok := sc.mutation.Invited(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldInvited,
		})
		_node.Invited = value
	}
	if value, ok := sc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldMessage,
		})
		_node.Message = value
	}
	return _node, _spec
}

// StatisticCreateBulk is the builder for creating many Statistic entities in bulk.
type StatisticCreateBulk struct {
	config
	builders []*StatisticCreate
}

// Save creates the Statistic entities in the database.
func (scb *StatisticCreateBulk) Save(ctx context.Context) ([]*Statistic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Statistic, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatisticMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatisticCreateBulk) SaveX(ctx context.Context) []*Statistic {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatisticCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatisticCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
