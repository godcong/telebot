// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/motomototv/telebot/database/ent/predicate"
	"github.com/motomototv/telebot/database/ent/statistic"
)

// StatisticUpdate is the builder for updating Statistic entities.
type StatisticUpdate struct {
	config
	hooks    []Hook
	mutation *StatisticMutation
}

// Where appends a list predicates to the StatisticUpdate builder.
func (su *StatisticUpdate) Where(ps ...predicate.Statistic) *StatisticUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetFirstName sets the "first_name" field.
func (su *StatisticUpdate) SetFirstName(s string) *StatisticUpdate {
	su.mutation.SetFirstName(s)
	return su
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableFirstName(s *string) *StatisticUpdate {
	if s != nil {
		su.SetFirstName(*s)
	}
	return su
}

// SetLatName sets the "lat_name" field.
func (su *StatisticUpdate) SetLatName(s string) *StatisticUpdate {
	su.mutation.SetLatName(s)
	return su
}

// SetNillableLatName sets the "lat_name" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableLatName(s *string) *StatisticUpdate {
	if s != nil {
		su.SetLatName(*s)
	}
	return su
}

// SetUserName sets the "user_name" field.
func (su *StatisticUpdate) SetUserName(s string) *StatisticUpdate {
	su.mutation.SetUserName(s)
	return su
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableUserName(s *string) *StatisticUpdate {
	if s != nil {
		su.SetUserName(*s)
	}
	return su
}

// SetFromUser sets the "from_user" field.
func (su *StatisticUpdate) SetFromUser(i int) *StatisticUpdate {
	su.mutation.ResetFromUser()
	su.mutation.SetFromUser(i)
	return su
}

// SetNillableFromUser sets the "from_user" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableFromUser(i *int) *StatisticUpdate {
	if i != nil {
		su.SetFromUser(*i)
	}
	return su
}

// AddFromUser adds i to the "from_user" field.
func (su *StatisticUpdate) AddFromUser(i int) *StatisticUpdate {
	su.mutation.AddFromUser(i)
	return su
}

// SetChannelID sets the "channel_id" field.
func (su *StatisticUpdate) SetChannelID(i int64) *StatisticUpdate {
	su.mutation.ResetChannelID()
	su.mutation.SetChannelID(i)
	return su
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableChannelID(i *int64) *StatisticUpdate {
	if i != nil {
		su.SetChannelID(*i)
	}
	return su
}

// AddChannelID adds i to the "channel_id" field.
func (su *StatisticUpdate) AddChannelID(i int64) *StatisticUpdate {
	su.mutation.AddChannelID(i)
	return su
}

// SetUserID sets the "user_id" field.
func (su *StatisticUpdate) SetUserID(i int) *StatisticUpdate {
	su.mutation.ResetUserID()
	su.mutation.SetUserID(i)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableUserID(i *int) *StatisticUpdate {
	if i != nil {
		su.SetUserID(*i)
	}
	return su
}

// AddUserID adds i to the "user_id" field.
func (su *StatisticUpdate) AddUserID(i int) *StatisticUpdate {
	su.mutation.AddUserID(i)
	return su
}

// SetJoinTime sets the "join_time" field.
func (su *StatisticUpdate) SetJoinTime(t time.Time) *StatisticUpdate {
	su.mutation.SetJoinTime(t)
	return su
}

// SetNillableJoinTime sets the "join_time" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableJoinTime(t *time.Time) *StatisticUpdate {
	if t != nil {
		su.SetJoinTime(*t)
	}
	return su
}

// SetInvited sets the "invited" field.
func (su *StatisticUpdate) SetInvited(i int64) *StatisticUpdate {
	su.mutation.ResetInvited()
	su.mutation.SetInvited(i)
	return su
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableInvited(i *int64) *StatisticUpdate {
	if i != nil {
		su.SetInvited(*i)
	}
	return su
}

// AddInvited adds i to the "invited" field.
func (su *StatisticUpdate) AddInvited(i int64) *StatisticUpdate {
	su.mutation.AddInvited(i)
	return su
}

// SetMessage sets the "message" field.
func (su *StatisticUpdate) SetMessage(i int64) *StatisticUpdate {
	su.mutation.ResetMessage()
	su.mutation.SetMessage(i)
	return su
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableMessage(i *int64) *StatisticUpdate {
	if i != nil {
		su.SetMessage(*i)
	}
	return su
}

// AddMessage adds i to the "message" field.
func (su *StatisticUpdate) AddMessage(i int64) *StatisticUpdate {
	su.mutation.AddMessage(i)
	return su
}

// SetLastMessage sets the "last_message" field.
func (su *StatisticUpdate) SetLastMessage(t time.Time) *StatisticUpdate {
	su.mutation.SetLastMessage(t)
	return su
}

// SetNillableLastMessage sets the "last_message" field if the given value is not nil.
func (su *StatisticUpdate) SetNillableLastMessage(t *time.Time) *StatisticUpdate {
	if t != nil {
		su.SetLastMessage(*t)
	}
	return su
}

// Mutation returns the StatisticMutation object of the builder.
func (su *StatisticUpdate) Mutation() *StatisticMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatisticUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatisticUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatisticUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatisticUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StatisticUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statistic.Table,
			Columns: statistic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statistic.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldFirstName,
		})
	}
	if value, ok := su.mutation.LatName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldLatName,
		})
	}
	if value, ok := su.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldUserName,
		})
	}
	if value, ok := su.mutation.FromUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldFromUser,
		})
	}
	if value, ok := su.mutation.AddedFromUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldFromUser,
		})
	}
	if value, ok := su.mutation.ChannelID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldChannelID,
		})
	}
	if value, ok := su.mutation.AddedChannelID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldChannelID,
		})
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldUserID,
		})
	}
	if value, ok := su.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldUserID,
		})
	}
	if value, ok := su.mutation.JoinTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldJoinTime,
		})
	}
	if value, ok := su.mutation.Invited(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldInvited,
		})
	}
	if value, ok := su.mutation.AddedInvited(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldInvited,
		})
	}
	if value, ok := su.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldMessage,
		})
	}
	if value, ok := su.mutation.AddedMessage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldMessage,
		})
	}
	if value, ok := su.mutation.LastMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldLastMessage,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StatisticUpdateOne is the builder for updating a single Statistic entity.
type StatisticUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatisticMutation
}

// SetFirstName sets the "first_name" field.
func (suo *StatisticUpdateOne) SetFirstName(s string) *StatisticUpdateOne {
	suo.mutation.SetFirstName(s)
	return suo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableFirstName(s *string) *StatisticUpdateOne {
	if s != nil {
		suo.SetFirstName(*s)
	}
	return suo
}

// SetLatName sets the "lat_name" field.
func (suo *StatisticUpdateOne) SetLatName(s string) *StatisticUpdateOne {
	suo.mutation.SetLatName(s)
	return suo
}

// SetNillableLatName sets the "lat_name" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableLatName(s *string) *StatisticUpdateOne {
	if s != nil {
		suo.SetLatName(*s)
	}
	return suo
}

// SetUserName sets the "user_name" field.
func (suo *StatisticUpdateOne) SetUserName(s string) *StatisticUpdateOne {
	suo.mutation.SetUserName(s)
	return suo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableUserName(s *string) *StatisticUpdateOne {
	if s != nil {
		suo.SetUserName(*s)
	}
	return suo
}

// SetFromUser sets the "from_user" field.
func (suo *StatisticUpdateOne) SetFromUser(i int) *StatisticUpdateOne {
	suo.mutation.ResetFromUser()
	suo.mutation.SetFromUser(i)
	return suo
}

// SetNillableFromUser sets the "from_user" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableFromUser(i *int) *StatisticUpdateOne {
	if i != nil {
		suo.SetFromUser(*i)
	}
	return suo
}

// AddFromUser adds i to the "from_user" field.
func (suo *StatisticUpdateOne) AddFromUser(i int) *StatisticUpdateOne {
	suo.mutation.AddFromUser(i)
	return suo
}

// SetChannelID sets the "channel_id" field.
func (suo *StatisticUpdateOne) SetChannelID(i int64) *StatisticUpdateOne {
	suo.mutation.ResetChannelID()
	suo.mutation.SetChannelID(i)
	return suo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableChannelID(i *int64) *StatisticUpdateOne {
	if i != nil {
		suo.SetChannelID(*i)
	}
	return suo
}

// AddChannelID adds i to the "channel_id" field.
func (suo *StatisticUpdateOne) AddChannelID(i int64) *StatisticUpdateOne {
	suo.mutation.AddChannelID(i)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *StatisticUpdateOne) SetUserID(i int) *StatisticUpdateOne {
	suo.mutation.ResetUserID()
	suo.mutation.SetUserID(i)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableUserID(i *int) *StatisticUpdateOne {
	if i != nil {
		suo.SetUserID(*i)
	}
	return suo
}

// AddUserID adds i to the "user_id" field.
func (suo *StatisticUpdateOne) AddUserID(i int) *StatisticUpdateOne {
	suo.mutation.AddUserID(i)
	return suo
}

// SetJoinTime sets the "join_time" field.
func (suo *StatisticUpdateOne) SetJoinTime(t time.Time) *StatisticUpdateOne {
	suo.mutation.SetJoinTime(t)
	return suo
}

// SetNillableJoinTime sets the "join_time" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableJoinTime(t *time.Time) *StatisticUpdateOne {
	if t != nil {
		suo.SetJoinTime(*t)
	}
	return suo
}

// SetInvited sets the "invited" field.
func (suo *StatisticUpdateOne) SetInvited(i int64) *StatisticUpdateOne {
	suo.mutation.ResetInvited()
	suo.mutation.SetInvited(i)
	return suo
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableInvited(i *int64) *StatisticUpdateOne {
	if i != nil {
		suo.SetInvited(*i)
	}
	return suo
}

// AddInvited adds i to the "invited" field.
func (suo *StatisticUpdateOne) AddInvited(i int64) *StatisticUpdateOne {
	suo.mutation.AddInvited(i)
	return suo
}

// SetMessage sets the "message" field.
func (suo *StatisticUpdateOne) SetMessage(i int64) *StatisticUpdateOne {
	suo.mutation.ResetMessage()
	suo.mutation.SetMessage(i)
	return suo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableMessage(i *int64) *StatisticUpdateOne {
	if i != nil {
		suo.SetMessage(*i)
	}
	return suo
}

// AddMessage adds i to the "message" field.
func (suo *StatisticUpdateOne) AddMessage(i int64) *StatisticUpdateOne {
	suo.mutation.AddMessage(i)
	return suo
}

// SetLastMessage sets the "last_message" field.
func (suo *StatisticUpdateOne) SetLastMessage(t time.Time) *StatisticUpdateOne {
	suo.mutation.SetLastMessage(t)
	return suo
}

// SetNillableLastMessage sets the "last_message" field if the given value is not nil.
func (suo *StatisticUpdateOne) SetNillableLastMessage(t *time.Time) *StatisticUpdateOne {
	if t != nil {
		suo.SetLastMessage(*t)
	}
	return suo
}

// Mutation returns the StatisticMutation object of the builder.
func (suo *StatisticUpdateOne) Mutation() *StatisticMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatisticUpdateOne) Select(field string, fields ...string) *StatisticUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Statistic entity.
func (suo *StatisticUpdateOne) Save(ctx context.Context) (*Statistic, error) {
	var (
		err  error
		node *Statistic
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatisticUpdateOne) SaveX(ctx context.Context) *Statistic {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatisticUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatisticUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StatisticUpdateOne) sqlSave(ctx context.Context) (_node *Statistic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   statistic.Table,
			Columns: statistic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statistic.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Statistic.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statistic.FieldID)
		for _, f := range fields {
			if !statistic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statistic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldFirstName,
		})
	}
	if value, ok := suo.mutation.LatName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldLatName,
		})
	}
	if value, ok := suo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statistic.FieldUserName,
		})
	}
	if value, ok := suo.mutation.FromUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldFromUser,
		})
	}
	if value, ok := suo.mutation.AddedFromUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldFromUser,
		})
	}
	if value, ok := suo.mutation.ChannelID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldChannelID,
		})
	}
	if value, ok := suo.mutation.AddedChannelID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldChannelID,
		})
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldUserID,
		})
	}
	if value, ok := suo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: statistic.FieldUserID,
		})
	}
	if value, ok := suo.mutation.JoinTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldJoinTime,
		})
	}
	if value, ok := suo.mutation.Invited(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldInvited,
		})
	}
	if value, ok := suo.mutation.AddedInvited(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldInvited,
		})
	}
	if value, ok := suo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldMessage,
		})
	}
	if value, ok := suo.mutation.AddedMessage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: statistic.FieldMessage,
		})
	}
	if value, ok := suo.mutation.LastMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statistic.FieldLastMessage,
		})
	}
	_node = &Statistic{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
