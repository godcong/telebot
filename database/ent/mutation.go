// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/motomototv/telebot/database/ent/message"
	"github.com/motomototv/telebot/database/ent/predicate"
	"github.com/motomototv/telebot/database/ent/statistic"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCommand   = "Command"
	TypeMessage   = "Message"
	TypeStatistic = "Statistic"
)

// CommandMutation represents an operation that mutates the Command nodes in the graph.
type CommandMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Command, error)
	predicates    []predicate.Command
}

var _ ent.Mutation = (*CommandMutation)(nil)

// commandOption allows management of the mutation configuration using functional options.
type commandOption func(*CommandMutation)

// newCommandMutation creates new mutation for the Command entity.
func newCommandMutation(c config, op Op, opts ...commandOption) *CommandMutation {
	m := &CommandMutation{
		config:        c,
		op:            op,
		typ:           TypeCommand,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommandID sets the ID field of the mutation.
func withCommandID(id int) commandOption {
	return func(m *CommandMutation) {
		var (
			err   error
			once  sync.Once
			value *Command
		)
		m.oldValue = func(ctx context.Context) (*Command, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Command.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommand sets the old Command of the mutation.
func withCommand(node *Command) commandOption {
	return func(m *CommandMutation) {
		m.oldValue = func(context.Context) (*Command, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommandMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommandMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommandMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Where appends a list predicates to the CommandMutation builder.
func (m *CommandMutation) Where(ps ...predicate.Command) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CommandMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Command).
func (m *CommandMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommandMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommandMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommandMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Command field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommandMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Command field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommandMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommandMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommandMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Command numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommandMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommandMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommandMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Command nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommandMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Command field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommandMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommandMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommandMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommandMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommandMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommandMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommandMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Command unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommandMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Command edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_type               *int
	add_type            *int
	action              *message.Action
	message             *string
	auto_remove         *bool
	auto_remove_time    *int
	addauto_remove_time *int
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Message, error)
	predicates          []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *MessageMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *MessageMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *MessageMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *MessageMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *MessageMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetAction sets the "action" field.
func (m *MessageMutation) SetAction(value message.Action) {
	m.action = &value
}

// Action returns the value of the "action" field in the mutation.
func (m *MessageMutation) Action() (r message.Action, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldAction(ctx context.Context) (v message.Action, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *MessageMutation) ResetAction() {
	m.action = nil
}

// SetMessage sets the "message" field.
func (m *MessageMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *MessageMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *MessageMutation) ResetMessage() {
	m.message = nil
}

// SetAutoRemove sets the "auto_remove" field.
func (m *MessageMutation) SetAutoRemove(b bool) {
	m.auto_remove = &b
}

// AutoRemove returns the value of the "auto_remove" field in the mutation.
func (m *MessageMutation) AutoRemove() (r bool, exists bool) {
	v := m.auto_remove
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoRemove returns the old "auto_remove" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldAutoRemove(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAutoRemove is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAutoRemove requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoRemove: %w", err)
	}
	return oldValue.AutoRemove, nil
}

// ResetAutoRemove resets all changes to the "auto_remove" field.
func (m *MessageMutation) ResetAutoRemove() {
	m.auto_remove = nil
}

// SetAutoRemoveTime sets the "auto_remove_time" field.
func (m *MessageMutation) SetAutoRemoveTime(i int) {
	m.auto_remove_time = &i
	m.addauto_remove_time = nil
}

// AutoRemoveTime returns the value of the "auto_remove_time" field in the mutation.
func (m *MessageMutation) AutoRemoveTime() (r int, exists bool) {
	v := m.auto_remove_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoRemoveTime returns the old "auto_remove_time" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldAutoRemoveTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAutoRemoveTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAutoRemoveTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoRemoveTime: %w", err)
	}
	return oldValue.AutoRemoveTime, nil
}

// AddAutoRemoveTime adds i to the "auto_remove_time" field.
func (m *MessageMutation) AddAutoRemoveTime(i int) {
	if m.addauto_remove_time != nil {
		*m.addauto_remove_time += i
	} else {
		m.addauto_remove_time = &i
	}
}

// AddedAutoRemoveTime returns the value that was added to the "auto_remove_time" field in this mutation.
func (m *MessageMutation) AddedAutoRemoveTime() (r int, exists bool) {
	v := m.addauto_remove_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetAutoRemoveTime resets all changes to the "auto_remove_time" field.
func (m *MessageMutation) ResetAutoRemoveTime() {
	m.auto_remove_time = nil
	m.addauto_remove_time = nil
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._type != nil {
		fields = append(fields, message.FieldType)
	}
	if m.action != nil {
		fields = append(fields, message.FieldAction)
	}
	if m.message != nil {
		fields = append(fields, message.FieldMessage)
	}
	if m.auto_remove != nil {
		fields = append(fields, message.FieldAutoRemove)
	}
	if m.auto_remove_time != nil {
		fields = append(fields, message.FieldAutoRemoveTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldType:
		return m.GetType()
	case message.FieldAction:
		return m.Action()
	case message.FieldMessage:
		return m.Message()
	case message.FieldAutoRemove:
		return m.AutoRemove()
	case message.FieldAutoRemoveTime:
		return m.AutoRemoveTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldType:
		return m.OldType(ctx)
	case message.FieldAction:
		return m.OldAction(ctx)
	case message.FieldMessage:
		return m.OldMessage(ctx)
	case message.FieldAutoRemove:
		return m.OldAutoRemove(ctx)
	case message.FieldAutoRemoveTime:
		return m.OldAutoRemoveTime(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case message.FieldAction:
		v, ok := value.(message.Action)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case message.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case message.FieldAutoRemove:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoRemove(v)
		return nil
	case message.FieldAutoRemoveTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoRemoveTime(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, message.FieldType)
	}
	if m.addauto_remove_time != nil {
		fields = append(fields, message.FieldAutoRemoveTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldType:
		return m.AddedType()
	case message.FieldAutoRemoveTime:
		return m.AddedAutoRemoveTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case message.FieldAutoRemoveTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAutoRemoveTime(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldType:
		m.ResetType()
		return nil
	case message.FieldAction:
		m.ResetAction()
		return nil
	case message.FieldMessage:
		m.ResetMessage()
		return nil
	case message.FieldAutoRemove:
		m.ResetAutoRemove()
		return nil
	case message.FieldAutoRemoveTime:
		m.ResetAutoRemoveTime()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Message edge %s", name)
}

// StatisticMutation represents an operation that mutates the Statistic nodes in the graph.
type StatisticMutation struct {
	config
	op            Op
	typ           string
	id            *int
	first_name    *string
	lat_name      *string
	user_name     *string
	from_user     *int
	addfrom_user  *int
	channel_id    *int64
	addchannel_id *int64
	user_id       *int
	adduser_id    *int
	join_time     *int64
	addjoin_time  *int64
	invited       *int64
	addinvited    *int64
	message       *int64
	addmessage    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Statistic, error)
	predicates    []predicate.Statistic
}

var _ ent.Mutation = (*StatisticMutation)(nil)

// statisticOption allows management of the mutation configuration using functional options.
type statisticOption func(*StatisticMutation)

// newStatisticMutation creates new mutation for the Statistic entity.
func newStatisticMutation(c config, op Op, opts ...statisticOption) *StatisticMutation {
	m := &StatisticMutation{
		config:        c,
		op:            op,
		typ:           TypeStatistic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatisticID sets the ID field of the mutation.
func withStatisticID(id int) statisticOption {
	return func(m *StatisticMutation) {
		var (
			err   error
			once  sync.Once
			value *Statistic
		)
		m.oldValue = func(ctx context.Context) (*Statistic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Statistic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatistic sets the old Statistic of the mutation.
func withStatistic(node *Statistic) statisticOption {
	return func(m *StatisticMutation) {
		m.oldValue = func(context.Context) (*Statistic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatisticMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatisticMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatisticMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFirstName sets the "first_name" field.
func (m *StatisticMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *StatisticMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *StatisticMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLatName sets the "lat_name" field.
func (m *StatisticMutation) SetLatName(s string) {
	m.lat_name = &s
}

// LatName returns the value of the "lat_name" field in the mutation.
func (m *StatisticMutation) LatName() (r string, exists bool) {
	v := m.lat_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLatName returns the old "lat_name" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldLatName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatName: %w", err)
	}
	return oldValue.LatName, nil
}

// ResetLatName resets all changes to the "lat_name" field.
func (m *StatisticMutation) ResetLatName() {
	m.lat_name = nil
}

// SetUserName sets the "user_name" field.
func (m *StatisticMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *StatisticMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *StatisticMutation) ResetUserName() {
	m.user_name = nil
}

// SetFromUser sets the "from_user" field.
func (m *StatisticMutation) SetFromUser(i int) {
	m.from_user = &i
	m.addfrom_user = nil
}

// FromUser returns the value of the "from_user" field in the mutation.
func (m *StatisticMutation) FromUser() (r int, exists bool) {
	v := m.from_user
	if v == nil {
		return
	}
	return *v, true
}

// OldFromUser returns the old "from_user" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldFromUser(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFromUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFromUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromUser: %w", err)
	}
	return oldValue.FromUser, nil
}

// AddFromUser adds i to the "from_user" field.
func (m *StatisticMutation) AddFromUser(i int) {
	if m.addfrom_user != nil {
		*m.addfrom_user += i
	} else {
		m.addfrom_user = &i
	}
}

// AddedFromUser returns the value that was added to the "from_user" field in this mutation.
func (m *StatisticMutation) AddedFromUser() (r int, exists bool) {
	v := m.addfrom_user
	if v == nil {
		return
	}
	return *v, true
}

// ResetFromUser resets all changes to the "from_user" field.
func (m *StatisticMutation) ResetFromUser() {
	m.from_user = nil
	m.addfrom_user = nil
}

// SetChannelID sets the "channel_id" field.
func (m *StatisticMutation) SetChannelID(i int64) {
	m.channel_id = &i
	m.addchannel_id = nil
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *StatisticMutation) ChannelID() (r int64, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldChannelID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// AddChannelID adds i to the "channel_id" field.
func (m *StatisticMutation) AddChannelID(i int64) {
	if m.addchannel_id != nil {
		*m.addchannel_id += i
	} else {
		m.addchannel_id = &i
	}
}

// AddedChannelID returns the value that was added to the "channel_id" field in this mutation.
func (m *StatisticMutation) AddedChannelID() (r int64, exists bool) {
	v := m.addchannel_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *StatisticMutation) ResetChannelID() {
	m.channel_id = nil
	m.addchannel_id = nil
}

// SetUserID sets the "user_id" field.
func (m *StatisticMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *StatisticMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *StatisticMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *StatisticMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *StatisticMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetJoinTime sets the "join_time" field.
func (m *StatisticMutation) SetJoinTime(i int64) {
	m.join_time = &i
	m.addjoin_time = nil
}

// JoinTime returns the value of the "join_time" field in the mutation.
func (m *StatisticMutation) JoinTime() (r int64, exists bool) {
	v := m.join_time
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinTime returns the old "join_time" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldJoinTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJoinTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJoinTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinTime: %w", err)
	}
	return oldValue.JoinTime, nil
}

// AddJoinTime adds i to the "join_time" field.
func (m *StatisticMutation) AddJoinTime(i int64) {
	if m.addjoin_time != nil {
		*m.addjoin_time += i
	} else {
		m.addjoin_time = &i
	}
}

// AddedJoinTime returns the value that was added to the "join_time" field in this mutation.
func (m *StatisticMutation) AddedJoinTime() (r int64, exists bool) {
	v := m.addjoin_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetJoinTime resets all changes to the "join_time" field.
func (m *StatisticMutation) ResetJoinTime() {
	m.join_time = nil
	m.addjoin_time = nil
}

// SetInvited sets the "invited" field.
func (m *StatisticMutation) SetInvited(i int64) {
	m.invited = &i
	m.addinvited = nil
}

// Invited returns the value of the "invited" field in the mutation.
func (m *StatisticMutation) Invited() (r int64, exists bool) {
	v := m.invited
	if v == nil {
		return
	}
	return *v, true
}

// OldInvited returns the old "invited" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldInvited(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvited is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvited requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvited: %w", err)
	}
	return oldValue.Invited, nil
}

// AddInvited adds i to the "invited" field.
func (m *StatisticMutation) AddInvited(i int64) {
	if m.addinvited != nil {
		*m.addinvited += i
	} else {
		m.addinvited = &i
	}
}

// AddedInvited returns the value that was added to the "invited" field in this mutation.
func (m *StatisticMutation) AddedInvited() (r int64, exists bool) {
	v := m.addinvited
	if v == nil {
		return
	}
	return *v, true
}

// ResetInvited resets all changes to the "invited" field.
func (m *StatisticMutation) ResetInvited() {
	m.invited = nil
	m.addinvited = nil
}

// SetMessage sets the "message" field.
func (m *StatisticMutation) SetMessage(i int64) {
	m.message = &i
	m.addmessage = nil
}

// Message returns the value of the "message" field in the mutation.
func (m *StatisticMutation) Message() (r int64, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldMessage(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// AddMessage adds i to the "message" field.
func (m *StatisticMutation) AddMessage(i int64) {
	if m.addmessage != nil {
		*m.addmessage += i
	} else {
		m.addmessage = &i
	}
}

// AddedMessage returns the value that was added to the "message" field in this mutation.
func (m *StatisticMutation) AddedMessage() (r int64, exists bool) {
	v := m.addmessage
	if v == nil {
		return
	}
	return *v, true
}

// ResetMessage resets all changes to the "message" field.
func (m *StatisticMutation) ResetMessage() {
	m.message = nil
	m.addmessage = nil
}

// Where appends a list predicates to the StatisticMutation builder.
func (m *StatisticMutation) Where(ps ...predicate.Statistic) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StatisticMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Statistic).
func (m *StatisticMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatisticMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.first_name != nil {
		fields = append(fields, statistic.FieldFirstName)
	}
	if m.lat_name != nil {
		fields = append(fields, statistic.FieldLatName)
	}
	if m.user_name != nil {
		fields = append(fields, statistic.FieldUserName)
	}
	if m.from_user != nil {
		fields = append(fields, statistic.FieldFromUser)
	}
	if m.channel_id != nil {
		fields = append(fields, statistic.FieldChannelID)
	}
	if m.user_id != nil {
		fields = append(fields, statistic.FieldUserID)
	}
	if m.join_time != nil {
		fields = append(fields, statistic.FieldJoinTime)
	}
	if m.invited != nil {
		fields = append(fields, statistic.FieldInvited)
	}
	if m.message != nil {
		fields = append(fields, statistic.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatisticMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statistic.FieldFirstName:
		return m.FirstName()
	case statistic.FieldLatName:
		return m.LatName()
	case statistic.FieldUserName:
		return m.UserName()
	case statistic.FieldFromUser:
		return m.FromUser()
	case statistic.FieldChannelID:
		return m.ChannelID()
	case statistic.FieldUserID:
		return m.UserID()
	case statistic.FieldJoinTime:
		return m.JoinTime()
	case statistic.FieldInvited:
		return m.Invited()
	case statistic.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatisticMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statistic.FieldFirstName:
		return m.OldFirstName(ctx)
	case statistic.FieldLatName:
		return m.OldLatName(ctx)
	case statistic.FieldUserName:
		return m.OldUserName(ctx)
	case statistic.FieldFromUser:
		return m.OldFromUser(ctx)
	case statistic.FieldChannelID:
		return m.OldChannelID(ctx)
	case statistic.FieldUserID:
		return m.OldUserID(ctx)
	case statistic.FieldJoinTime:
		return m.OldJoinTime(ctx)
	case statistic.FieldInvited:
		return m.OldInvited(ctx)
	case statistic.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown Statistic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatisticMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statistic.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case statistic.FieldLatName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatName(v)
		return nil
	case statistic.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case statistic.FieldFromUser:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromUser(v)
		return nil
	case statistic.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case statistic.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case statistic.FieldJoinTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinTime(v)
		return nil
	case statistic.FieldInvited:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvited(v)
		return nil
	case statistic.FieldMessage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatisticMutation) AddedFields() []string {
	var fields []string
	if m.addfrom_user != nil {
		fields = append(fields, statistic.FieldFromUser)
	}
	if m.addchannel_id != nil {
		fields = append(fields, statistic.FieldChannelID)
	}
	if m.adduser_id != nil {
		fields = append(fields, statistic.FieldUserID)
	}
	if m.addjoin_time != nil {
		fields = append(fields, statistic.FieldJoinTime)
	}
	if m.addinvited != nil {
		fields = append(fields, statistic.FieldInvited)
	}
	if m.addmessage != nil {
		fields = append(fields, statistic.FieldMessage)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatisticMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case statistic.FieldFromUser:
		return m.AddedFromUser()
	case statistic.FieldChannelID:
		return m.AddedChannelID()
	case statistic.FieldUserID:
		return m.AddedUserID()
	case statistic.FieldJoinTime:
		return m.AddedJoinTime()
	case statistic.FieldInvited:
		return m.AddedInvited()
	case statistic.FieldMessage:
		return m.AddedMessage()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatisticMutation) AddField(name string, value ent.Value) error {
	switch name {
	case statistic.FieldFromUser:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFromUser(v)
		return nil
	case statistic.FieldChannelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChannelID(v)
		return nil
	case statistic.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case statistic.FieldJoinTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddJoinTime(v)
		return nil
	case statistic.FieldInvited:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInvited(v)
		return nil
	case statistic.FieldMessage:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Statistic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatisticMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatisticMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatisticMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Statistic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatisticMutation) ResetField(name string) error {
	switch name {
	case statistic.FieldFirstName:
		m.ResetFirstName()
		return nil
	case statistic.FieldLatName:
		m.ResetLatName()
		return nil
	case statistic.FieldUserName:
		m.ResetUserName()
		return nil
	case statistic.FieldFromUser:
		m.ResetFromUser()
		return nil
	case statistic.FieldChannelID:
		m.ResetChannelID()
		return nil
	case statistic.FieldUserID:
		m.ResetUserID()
		return nil
	case statistic.FieldJoinTime:
		m.ResetJoinTime()
		return nil
	case statistic.FieldInvited:
		m.ResetInvited()
		return nil
	case statistic.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatisticMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatisticMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatisticMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatisticMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatisticMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatisticMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatisticMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Statistic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatisticMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Statistic edge %s", name)
}
